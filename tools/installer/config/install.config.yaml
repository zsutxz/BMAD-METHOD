installation-options:
  full:
    name: Complete BMad Core
    description: Copy the entire .bmad-core folder with all agents, templates, and tools
    action: copy-folder
    source: bmad-core
  single-agent:
    name: Single Agent
    description: Select and install a single agent with its dependencies
    action: copy-agent
ide-configurations:
  cursor:
    name: Cursor
    rule-dir: .cursor/rules/bmad/
    format: multi-file
    command-suffix: .mdc
    instructions: |
      # To use BMad agents in Cursor:
      # 1. Press Ctrl+L (Cmd+L on Mac) to open the chat
      # 2. Type @agent-name (e.g., "@dev", "@pm", "@architect")
      # 3. The agent will adopt that persona for the conversation
  claude-code:
    name: Claude Code
    rule-dir: .claude/commands/BMad/
    format: multi-file
    command-suffix: .md
    instructions: |
      # To use BMad agents in Claude Code:
      # 1. Type /agent-name (e.g., "/dev", "/pm", "/architect")
      # 2. Claude will switch to that agent's persona
  iflow-cli:
    name: iFlow CLI
    rule-dir: .iflow/commands/BMad/
    format: multi-file
    command-suffix: .md
    instructions: |
      # To use BMad agents in iFlow CLI:
      # 1. Type /agent-name (e.g., "/dev", "/pm", "/architect")
      # 2. iFlow will switch to that agent's persona
  crush:
    name: Crush
    rule-dir: .crush/commands/BMad/
    format: multi-file
    command-suffix: .md
    instructions: |
      # To use BMad agents in Crush:
      # 1. Press CTRL + P and press TAB
      # 2. Select agent or task
      # 3. Crush will switch to that agent's persona / task
  windsurf:
    name: Windsurf
    rule-dir: .windsurf/workflows/
    format: multi-file
    command-suffix: .md
    instructions: |
      # To use BMad agents in Windsurf:
      # 1. Type /agent-name (e.g., "/dev", "/pm")
      # 2. Windsurf will adopt that agent's persona
  trae:
    name: Trae
    rule-dir: .trae/rules/
    format: multi-file
    command-suffix: .md
    instructions: |
      # To use BMad agents in Trae:
      # 1. Type @agent-name (e.g., "@dev", "@pm", "@architect")
      # 2. Trae will adopt that agent's persona
  roo:
    name: Roo Code
    format: custom-modes
    file: .roomodes
    instructions: |
      # To use BMad agents in Roo Code:
      # 1. Open the mode selector (usually in the status bar)
      # 2. Select any bmad-{agent} mode (e.g., "bmad-dev", "bmad-pm")
      # 3. The AI will adopt that agent's full personality and capabilities
  cline:
    name: Cline
    rule-dir: .clinerules/
    format: multi-file
    command-suffix: .md
    instructions: |
      # To use BMad agents in Cline:
      # 1. Open the Cline chat panel in VS Code
      # 2. Type @agent-name (e.g., "@dev", "@pm", "@architect")
      # 3. The agent will adopt that persona for the conversation
      # 4. Rules are stored in .clinerules/ directory in your project
  gemini:
    name: Gemini CLI
    rule-dir: .gemini/commands/BMad/
    format: multi-file
    command-suffix: .toml
    instructions: |
      # To use BMad agents with the Gemini CLI:
      # 1. The installer creates a `BMad` folder in `.gemini/commands`.
      # 2. This adds custom commands for each agent and task.
      # 3. Type /BMad:agents:<agent-name> (e.g., "/BMad:agents:dev", "/BMad:agents:pm") or /BMad:tasks:<task-name> (e.g., "/BMad:tasks:create-doc").
      # 4. The agent will adopt that persona for the conversation or preform the task.
  github-copilot:
    name: Github Copilot
    rule-dir: .github/chatmodes/
    format: multi-file
    command-suffix: .md
    instructions: |
      # To use BMad agents with Github Copilot:
      # 1. The installer creates a .github/chatmodes/ directory in your project
      # 2. Open the Chat view (`⌃⌘I` on Mac, `Ctrl+Alt+I` on Windows/Linux) and select **Agent** from the chat mode selector.
      # 3. The agent will adopt that persona for the conversation
      # 4. Requires VS Code 1.101+ with `chat.agent.enabled: true` in settings
      # 5. Agent files are stored in .github/chatmodes/
      # 6. Use `*help` to see available commands and agents
  kilo:
    name: Kilo Code
    format: custom-modes
    file: .kilocodemodes
    instructions: |
      # To use BMAD™ agents in Kilo Code:
      # 1. Open the mode selector in VSCode
      # 2. Select a bmad-{agent} mode (e.g. "bmad-dev")
      # 3. The AI adopts that agent's persona and capabilities

  qwen-code:
    name: Qwen Code
    rule-dir: .qwen/commands/BMad/
    format: multi-file
    command-suffix: .toml
    instructions: |
      # To use BMad agents with Qwen Code:
      # 1. The installer creates a `BMad` folder in `.qwen/commands`.
      # 2. This adds custom commands for each agent and task.
      # 3. Type /BMad:agents:<agent-name> (e.g., "/BMad:agents:dev", "/BMad:agents:pm") or /BMad:tasks:<task-name> (e.g., "/BMad:tasks:create-doc").
      # 4. The agent will adopt that persona for the conversation or perform the task.

  auggie-cli:
    name: Auggie CLI (Augment Code)
    format: multi-location
    locations:
      user:
        name: User Commands (Global)
        rule-dir: ~/.augment/commands/bmad/
        description: Available across all your projects (user-wide)
      workspace:
        name: Workspace Commands (Project)
        rule-dir: ./.augment/commands/bmad/
        description: Stored in your repository and shared with your team
    command-suffix: .md
    instructions: |
      # To use BMad agents in Auggie CLI (Augment Code):
      # 1. Type /bmad:agent-name (e.g., "/bmad:dev", "/bmad:pm", "/bmad:architect")
      # 2. The agent will adopt that persona for the conversation
      # 3. Commands are available based on your selected location(s)

  codex:
    name: Codex CLI
    format: project-memory
    file: AGENTS.md
    instructions: |
      # To use BMAD agents with Codex CLI:
      # 1. The installer updates/creates AGENTS.md at your project root with BMAD agents and tasks.
      # 2. Run `codex` in your project. Codex automatically reads AGENTS.md as project memory.
      # 3. Mention agents in your prompt (e.g., "As dev, please implement ...") or reference tasks.
      # 4. You can further customize global Codex behavior via ~/.codex/config.toml.

  codex-web:
    name: Codex Web Enabled
    format: project-memory
    file: AGENTS.md
    instructions: |
      # To enable BMAD agents for Codex Web (cloud):
      # 1. The installer updates/creates AGENTS.md and ensures `.bmad-core` is NOT ignored by git.
      # 2. Commit `.bmad-core/` and `AGENTS.md` to your repository.
      # 3. Open the repo in Codex Web and reference agents naturally (e.g., "As dev, ...").
      # 4. Re-run this installer to refresh agent sections when the core changes.

  opencode:
    name: OpenCode CLI
    format: jsonc-config
    file: opencode.jsonc
    instructions: |
      # To use BMAD agents with OpenCode CLI:
      # 1. The installer creates/updates `opencode.jsonc` at your project root.
      # 2. It ensures the BMAD core instructions file is referenced: `./.bmad-core/core-config.yaml`.
      # 3. If an existing `opencode.json` or `opencode.jsonc` is present, it is preserved and only `instructions` are minimally merged.
      # 4. Run `opencode` in this project to use your configured agents and commands.
